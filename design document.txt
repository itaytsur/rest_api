Design Document for RESTful web service that implements a queue mechanism Home Assignment

Requirements:

The project's requirements were to create a RESTful api that implements a queue mechanism, where the queue would have 3 basic methods: enqueue, dequeue, and peek (returning all contents in the queue).

The implementation was required to be done in NodeJS, and usage of web framework was allowed.

Another requirement was to test the api using mocha

Finally, the queue was required to be implemented on an SQLite Database.



Solution:

When I first received this home assignment I thought it would be impossible for me to complete it in NodeJS since I had no previous knowledge of NodeJS prior to working on this project.
I requested an assignment that would better fit my toolkit (C and C++) and was asked to implement this project using C++.
After some reading I decided that it would be best if I implemented this project in NodeJS as initially requested - in order to present the project in the manner it was meant to be preseted, as well as to expand my own knowledge as I love learning and experimenting with new things.
I had a limited time to learn NodeJS in order to submit this project on time.
I started by taking a NodeJS course online, then I was first introduced to things like package.json file (and json in general), npm's and npm run scripts, REPL, template strings, working with web servers on NodeJS and many more new and exciting features.

My solution includes using the 'express' module as a web framework, 'SQLite' as a database, the 'sqlite3' module as a middleware to connect with the 'SQLite' databse, 'Postman' in order to submit PUT, DELETE, and GET requests to the server and get feedback, the 'mocha' module for unit testing as well as the 'chai' and 'chai-http' modules.

I ran multiple POST, DELETE, and GET requests on Postman, all of which showed the queue working properly.

Unfortunately however, the unit tests using mocha, chai and chai-http were unable to be ran properly.
the first test was for the enqueue method of the queue - initially it was meant just to get a status back - after that more tests were planned fir expansion, such as getting back the object in JSON format with a preceding field 'status: "success"' - for some reason the 'chai-http' module was not recognized and the test was unable to execute.
If I had a better understanding of NodeJS I am sure this is something I would have been able to resolve much quicker but because of the time constraints I was unable to properly write api unit tests for this queue.



Edge Cases:

- peek: when using peek (HTTP GET request) on an empty queue the user will receive an empty array.
- dequeue: when using dequeue (HTTP DELETE request) on an empty queue the user will receive back an empty feedback.
 
- Concurrency: this queue, being based on SQLite databse, does not support concurrent writes. Although each action does not last more than a few dozen milliseconds, concurrent writes may result in corruption to the database.
- High Volume: This queue is not the best fit for write intensive use.
- Large Volume: this queue, being based on SQLite database, is limited in size to 140 TB.





